#  _____ __  __ _   ___  __   ____ ___  _   _ _____ ___ ____
# |_   _|  \/  | | | \ \/ /  / ___/ _ \| \ | |  ___|_ _/ ___|
#   | | | |\/| | | | |\  /  | |  | | | |  \| | |_   | | |  _
#   | | | |  | | |_| |/  \  | |__| |_| | |\  |  _|  | | |_| |
#   |_| |_|  |_|\___//_/\_\  \____\___/|_| \_|_|   |___\____|
#
# Ken Custom Tmux Config
#
# Notes:
#  bind-key       = bind key to PREFIX
#  bind-key -n    = bind key to ALT without using PREFIX first
#  bind-key -r    = allow key to repeat
#
# if-shell '[ $(echo "$(tmux -V | cut -d" " -f2) >= 2.1" | bc) -eq 1 ]' \
#   'command if true' \
#   'command if false'
#
# ══════════════════════════════════════════════════════════════════════════════
# Unbind all keys. This guarantees a clean slate.
#unbind -a

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ PREFIX                                                                     ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Remap prefix from 'C-b' to 'C-a'
#unbind C-b
#set -g prefix C-a
#bind C-a send-prefix

# Pressing C-a locally will press C-b on remote host tmux
bind -n C-a send-prefix

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ OPTIONS                                                                    ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Upgrade $TERM
set -g default-terminal "xterm-256color" 
#set -g default-terminal "tmux-256color" 
#set -g default-terminal "screen-256color" 
# 24-bit Tc (true colors) (minimum tmux v2.6) ( :Tc )
# Enables Italics ( :sitm ) ( :sitm=\E[3m )
# Enables PageUp/PageDown to scroll text ( :smcup@:rmcup@ )
#set-option -ga terminal-overrides ",*256col*:Tc"
set-option -ga terminal-overrides ",*256col*:Tc:smcup@:rmcup@"
#set-option -ga terminal-overrides ",*256col*:Tc:sitm=\E[3m:smcup@:rmcup@"

# Time in milliseconds for which tmux waits after an escape
set-option -g escape-time 0

# Set repeat key timeout
set -sg repeat-time 1500

# Focus events enabled for terminals that support them
set -g focus-events on

# History settings
set -g history-limit 10000
#set -g history-file ~/.tmux/tmuxhistory

# Pass keys through terminal and tmux
set-window-option -g xterm-keys on

# Show error messages long enough to read them
set -g display-time 2500

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Renumber panes on closeures
set -g renumber-windows on

# Makes it such that the window is only resized if the smaller client is actively looking at it.
setw -g aggressive-resize on

# Rename windows automatically
set-option -g allow-rename on
set-window-option -g automatic-rename on
#set-option -g automatic-rename-format '#{b:pane_current_path}'

# Use vim key bindings
set-option -g mode-keys vi
set-option -g status-keys vi

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ KEY BINDINGS                                                               ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Reload config file
bind C-r source-file ~/.tmux.conf \; display-message "Config reloaded..."
bind F5 source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Kill window/server
bind k confirm kill-window
bind K confirm kill-server

# Toggle status bar [top|bottom]
bind F4 set -g status-position \; display-message "Status bar position: #{status-position}"

# New window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Toggle monitor-activity
bind F3 set-option -w monitor-activity \; display-message "Activity monitor: #{?monitor-activity,on,off}"

# Command that opens SSH connection in new window, renames it and changes background color
#bind M-s command-prompt -p "ssh:" "new-window -n [ssh]%1 'ssh %1' ; select-pane -P 'bg=colour236'"
bind M-s command-prompt -p "ssh:" "new-window -n %1 'ssh %1'"

# Name & create new session / window
bind S command-prompt -p "Name of new session:" "new-session -s '%%'"
bind C command-prompt -p "Name of new window:" "new-window -n '%%'"

# Move window to session with prompt
bind J command-prompt -p "Session name to Move current window to:" "move-window -t '%%'"
bind j command-prompt -p "Window number to Join current pane to:" "join-pane -t ':%%'"
bind M display-message "Joined marked pane to currently selected window:" \; "join-pane"
bind ! display-message "Pane broken into its own window" \; "break-pane"

# Toggle automatic rename [on|off]
bind F2 setw -g automatic-rename \; display-message "Automatic rename changed: #{?automatic-rename,on,off}"

# Rename session / window
bind R command-prompt -I "#{session_name}" "rename-session '%%'"
bind r command-prompt -I "#{window_name}" "rename-window '%%'"

# Save session to bash script
#bind C-s run-shell ~/.tmux/scripts/tmux-save-session.sh \; display-message "Session saved to bash file..."

# Synchronize panes toggle
#bind C-q setw synchronize-panes
bind C-s setw synchronize-panes

# Split pane with same directory
unbind '"'
unbind '%'
bind '-' split-window -v -c "#{pane_current_path}"
bind '\' split-window -h -c "#{pane_current_path}"
bind '_' split-window -fv -c "#{pane_current_path}"
bind '|' split-window -fh -c "#{pane_current_path}"

# Swap windows left or right
#bind -n -r C-S-Left swap-window -t -1
#bind -n -r C-S-Right swap-window -t +1
# Using PREFIX
#bind -r C-S-Left swap-window -t -1
#bind -r C-S-Right swap-window -t +1

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
#bind -r Tab last-window
bind -r Tab next-window
bind -r C-o swap-pane -D

## Switch panes and windows using ALT key instead of PREFIX ##
# Switch panes
#bind-key -n M-h select-pane -L
#bind-key -n M-j select-pane -D
#bind-key -n M-k select-pane -U
#bind-key -n M-l select-pane -R

# Switch windows
#unbind-key n
bind-key -n M-p previous-window
bind-key -n M-n next-window
bind-key -n M-1 select-window -t:1
bind-key -n M-2 select-window -t:2
bind-key -n M-3 select-window -t:3
bind-key -n M-4 select-window -t:4
bind-key -n M-5 select-window -t:5
bind-key -n M-6 select-window -t:6
bind-key -n M-7 select-window -t:7
bind-key -n M-8 select-window -t:8
bind-key -n M-9 select-window -t:9
bind-key -n M-0 select-window -t:0

# Switch sessions
bind-key -n M-l switch-client -l
bind-key -n M-P switch-client -p
bind-key -n M-N switch-client -n

# Prompt to rename session / window right after it is created
#set-hook -g after-new-session 'command-prompt -I "#{session_name}" "rename-session '%%'"'
#set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# htop
bind-key H new-window "htop" \; set-option -w monitor-activity off

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ MOUSE MODE                                                                 ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Enable/Disable mouse mode (default on) [Note: hold shift key to select the text using mouse]
set -g mouse on

# Drag to re-order windows
bind -n MouseDrag1Status swap-window -t=

# Double click on the window list to open a new window
bind -n DoubleClick1Status new-window

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
#bind -T copy-mode-vi WheelUpPane select-pane \; send-keys -X -N 2 scroll-up
#bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ Enable Locking (using vlock)                                               ║
# ╚════════════════════════════════════════════════════════════════════════════╝
#set -g lock-command vlock
#set -g lock-after-time 0 # Seconds; 0 = never
#bind C-l lock-session

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ COPY / PASTE                                                               ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# COMMAND     DESCRIPTION
# -------------------------------
# [           Enter copy mode
# space       Start selecting text to copy
# enter       Finish by copying selection to buffer
# ]           Paste recent buffer
# =           Choose which buffer to paste interactively from a list
# #           List all paste buffers
# -           Delete the most recently copied buffer of text
# -------------------------------
# q           quit mode
# j, k, l, h  down, up, right left
# J or K      scroll down or up
# F or B      go to next or previous page
# $           go to end of line
# 0           go to beginning of line
# w or b      go to next or previous word
# / or ?      search forward or backward
# n           search next (use after above commands)
# space       start selection
# Esc         clear selection
# y           copy section
# p           paste selection

# Extra selections and Vi keybindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi l send-keys -X select-line
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection
#bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# xclip (copy to system clipboard)
# For binding 'y' to copy and exiting selection mode
#bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -sel clip -i'
# For binding 'Enter' to copy and not leave selection mode
#bind-key -T copy-mode-vi Enter send-keys -X copy-pipe 'xclip -sel clip -i' '\;'  send -X clear-selection

# Copies/Paste text to/from the operating system clipboard
# If you are running Linux and you want to use xsel instead of xclip replace xclip -r with xsel -i -p and xclip -o with xsel -o -p
#bind-key -T copy-mode-vi C-C send-keys -X copy-pipe "xclip -r" \; display-message "Copied to selection"
#bind-key -T copy-mode-vi C-c send-keys -X copy-pipe "xclip -r -selection clipboard" \; display-message "Copied to clipboard"
#bind-key C-c run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"
#bind-key C-c run "tmux save-buffer - | xclip -i -sel clipboard > /dev/null" \; display-message "Copied to clipboard"

# Mouse drag copy selection to tmux clipboard
#bind -T copy-mode-vi MouseDragEnd1Pane send-keys -M -X copy-pipe 'xclip -in -selection clipboard'
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -i -sel clip > /dev/null"

# Paste Buffer
bind-key C-v run-shell "xclip -o | tmux load-buffer - && tmux paste-buffer" \; display-message "Pasted from clipboard"
#bind-key p paste-buffer -s ""
#bind-key P choose-buffer "paste-buffer -b '%%' -s ''"

# Cancel
bind-key -T copy-mode-vi Escape send-keys -X cancel

# ══════════════════════════════════════════════════════════════════════════════
# Vim customizations / fixes
unbind-key -n C-Left
unbind-key -n C-Right

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
#bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
#bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ DESIGN                                                                     ║
# ╚════════════════════════════════════════════════════════════════════════════╝
#set -g window-style 'bg=colour235'   # All panes

setw -g monitor-activity on

set -g status-interval 5        # Status bar update interval
set -g status-justify left      # Window status alignment [left|centre|right]
set -g status-position bottom   # Status bar position

set -g status-style "fg=colour255,bg=colour235"

set -g status-left-length 150
set -g status-left "#[fg=colour255,bg=colour31]#{?client_prefix,#[bg=colour202],} #S #[bg=colour235] "

set -g window-status-current-format "#[fg=colour255,bg=colour31] #I #[fg=colour255,bg=colour238] #W#F "
set -g window-status-format "#[fg=colour31]#{?window_activity_flag,#[bg=colour238],} #I #[fg=colour255,bg=colour235] #W#F "
set -g window-status-separator " "

set -g status-right-length 200
set -g status-right "#[fg=colour255,bg=colour238] #(cut -d ' ' -f 1-3 /proc/loadavg) #[fg=colour255,bg=colour31]#{?client_prefix,#[bg=colour202],} #H "


# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ SOURCE THEME FILE                                                          ║
# ╚════════════════════════════════════════════════════════════════════════════╝
#run-shell "tmux source-file ~/.tmux/themes/powerline.theme"
#run-shell "tmux source-file ~/.tmux/themes/blocks.theme"

if-shell "test -f ~/.tmux/themes/powerline.theme" "source ~/.tmux/themes/powerline.theme"

bind F7 run-shell "tmux source-file ~/.tmux/themes/powerline.theme"
bind F8 run-shell "tmux source-file ~/.tmux/themes/blocks.theme"

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ NESTING LOCAL AND REMOTE                                                   ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Session is considered to be remote when we ssh into host
#if-shell 'test -n "$SSH_CLIENT"' \
#    'source-file ~/.tmux.remote.conf'

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ PLUGINS                                                                    ║
# ╚════════════════════════════════════════════════════════════════════════════╝
set -g @plugin 'tmux-plugins/tpm'

#set -g @plugin 'thewtex/tmux-mem-cpu-load'
#set -g @plugin 'samoshkin/tmux-plugin-sysstat'
#set -g @plugin 'tmux-plugins/tmux-sensible'
#set -g @plugin 'tmux-plugins/tmux-net-speed'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
