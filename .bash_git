#!/bin/bash
# ~/.bash_git
# Collection of custom git PS1 prompt, functions and aliases.
# Most of these I've found on the net from others and modified for my setup.

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ COLORS                                                                     ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# COLORS
BLACK="\e[1;30m"       # Black
RED="\e[1;31m"         # Red
GREEN="\e[1;32m"       # Green
YELLOW="\e[1;33m"      # Yellow
BLUE="\e[1;34m"        # Blue
PURPLE="\e[1;35m"      # Purple
CYAN="\e[1;36m"        # Cyan
WHITE="\e[1;37m"       # White
RESET="\e[m"           # Color Reset
# PS1 COLORS
PS1BLACK="\[\e[1;30m\]"       # Black
PS1RED="\[\e[1;31m\]"         # Red
PS1GREEN="\[\e[1;32m\]"       # Green
PS1YELLOW="\[\e[1;33m\]"      # Yellow
PS1BLUE="\[\e[1;34m\]"        # Blue
PS1PURPLE="\[\e[1;35m\]"      # Purple
PS1CYAN="\[\e[1;36m\]"        # Cyan
PS1WHITE="\[\e[1;37m\]"       # White
PS1RESET="\[\e[m\]"         # Color Reset

#------------------------------------------------------------------------------
# Append git branch to current PS1 if git installed
#------------------------------------------------------------------------------
command -v git &> /dev/null && export PS1="$PS1\$(parse_bash_git_branch)"

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ git PS1 Prompt Functions                                                   ║
# ╚════════════════════════════════════════════════════════════════════════════╝
parse_bash_git_branch() {
  BRANCH="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
  if [ ! "${BRANCH}" == "" ]; then
    if [ "${BRANCH}" == "master" ]; then
      BRANCH="${GREEN}${BRANCH}${RESET}"
    else
      BRANCH="${YELLOW}${BRANCH}${RESET}"
    fi
    STAT="$(parse_git_dirty)"
    echo -e "[${BRANCH}${STAT}] "
  fi
}

parse_git_dirty() {
  status="$(git status 2>&1 | tee)"
  #clean="$(echo -n "${status}" 2> /dev/null | grep "Your branch is up to date" &> /dev/null; echo "$?")"
  dirty="$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")"
  untracked="$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")"
  ahead="$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")"
  newfile="$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")"
  renamed="$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")"
  deleted="$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")"
  bits=''
  #if [ "${clean}" == "0" ]; then bits="${GREEN}✔${bits}${RESET}"; fi
  if [ "${renamed}" == "0" ]; then bits="${RED}>${bits}${RESET}"; fi
  if [ "${ahead}" == "0" ]; then bits="${RED}+${bits}${RESET}"; fi
  if [ "${newfile}" == "0" ]; then bits="${GREEN}*${bits}${RESET}"; fi
  if [ "${untracked}" == "0" ]; then bits="${YELLOW}?${bits}${RESET}"; fi
  if [ "${deleted}" == "0" ]; then bits="${RED}x${bits}${RESET}"; fi
  if [ "${dirty}" == "0" ]; then bits="${RED}!${bits}${RESET}"; fi
  if [ ! "${bits}" == "" ]; then echo " ${bits}"; else echo ""; fi
}

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ Git Aliases / Functions                                                    ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Lazy git commit
lazy-git-commit() { git commit -am "$*" && git push ; }

# Delete all local git branches that have been merged and deleted from remote
alias git-prune-local="git fetch --all --prune"

# Git log
alias git-log="git --no-pager log --all --color=always --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' | less -r -X +/[^/]HEAD"

# Git commit browser
git-show() {
  is_in_git_repo
  local commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
  local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always %'"
  git log --color=always \
    --graph --decorate \
    --format="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" "$@" | \
  fzf --no-sort --tiebreak=index --no-multi --reverse --ansi \
    --header="enter to view, alt-y to copy hash" \
    --preview-window=down:50% \
    --preview="$view_commit" \
    --bind="enter:execute:$view_commit | less -R" \
    --bind="alt-y:execute:$commit_hash | xclip -selection clipboard"
}

# Modified from https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf_git_preview() {
  fzf --height 50% "$@" --border
}

git-file() {
  is_in_git_repo
  git -c color.status=always status --short | \
  fzf_git_preview -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' | cut -c4- | sed 's/.* -> //'
}

git-checkout() {
  is_in_git_repo
  git checkout "$(git branch -a --color=always --sort=-committerdate | grep -v '/HEAD\s' | sort | \
    fzf_git_preview --ansi --multi --tac \
       --preview-window right:70% \
       --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) -- | head -'$LINES | sed 's/^..//' | cut -d' ' -f1 | sed 's#^remotes/##')" &> /dev/null
}

git-delete-branch() {
  is_in_git_repo
  git branch -D "$(git branch -a --color=always --sort=-committerdate | grep -v '/HEAD\s' | sort | \
    fzf_git_preview --ansi --multi --tac \
       --header 'Press enter to delete branch' \
       --preview-window right:70% \
       --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) -- | head -'$LINES | sed 's/^..//' | cut -d' ' -f1 | sed 's#^remotes/##')" &> /dev/null
}

git-tag() {
  is_in_git_repo
  git tag --sort -version:refname | \
  fzf_git_preview --multi \
    --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

git-history() {
  is_in_git_repo
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always | \
  fzf_git_preview --ansi --no-sort --reverse --multi \
    --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | head -1 | xargs git show --color=always | head -'$LINES | grep -o "[a-f0-9]\{7,\}"
}

git-remote() {
  is_in_git_repo
  git remote -v | awk '{print $1 "\t" $2}' | uniq | \
  fzf_git_preview --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" --remotes={1} | head -200' | cut -d$'\t' -f1
}

# Modified from https://github.com/junegunn/fzf/wiki/examples#git
# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# enter checks the stash out as a branch, for easier merging
git-stash() {
  is_in_git_repo
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --header 'enter:check out stash' \
        --expect=ctrl-d,enter);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'enter' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}
