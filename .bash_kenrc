#!/bin/bash
# ~/.bashrc
# Custom bashrc not generally needed across multiple systems
#------------------------------------------------------------------------------
### KEN BASHRC
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
### Enable/Disable (Y/N)
#------------------------------------------------------------------------------
DISPLAY_TMUX="Y"                # shows if tmux is running or not at login
DISPLAY_GREETING="Y"            # shows greeting with info
DISPLAY_GREETING_WEATHER="N"    # shows weather in greeting
DISPLAY_GREETING_BASHINFO="N"   # shows weather in greeting

#------------------------------------------------------------------------------
### COLORS (More colors in ~/.bash_aliases)
#------------------------------------------------------------------------------
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White
NC="\e[m"               # Color Reset

### SSH Hushlogin (create ~/.hushlogin if not exists)
#------------------------------------------------------------------------------
if [[ ! -r "$HOME"/.hushlogin ]]; then touch "$HOME"/.hushlogin; fi

#------------------------------------------------------------------------------
### MAIL
#------------------------------------------------------------------------------
# Check for new mail at login if not =0 and wait ## seconds before mail checks
MAILCHECK=60
#if [ -d $HOME/Maildir/ ]; then
#  export MAIL=$HOME/Maildir/
#  export MAILPATH=$HOME/Maildir/
#  export MAILDIR=$HOME/Maildir/
#elif [ -f /var/mail/$USER ]; then
#  export MAIL="/var/mail/$USER"
#fi

#------------------------------------------------------------------------------
### Default editor
#------------------------------------------------------------------------------
export VISUAL="/bin/nano"
export EDITOR="/bin/nano"

#------------------------------------------------------------------------------
### LESS Command Options
#-------------------------------------------------------------
# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
alias more='less'
export PAGER=less
export LESSCHARSET='latin1'
export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>&-'
                # Use this if lesspipe.sh exists.
export LESS='-i -N -w  -z-4 -g -e -M -X -F -R -P%t?f%f \
:stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
# LESS man page colors (makes Man pages more readable).
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

#------------------------------------------------------------------------------
### TMUX
#------------------------------------------------------------------------------
### Display TMUX session @ login
if [[ "${DISPLAY_TMUX}" == "Y" ]]; then
  # Do nothing if root else tmux if user
  if [[ "${UID}" -ne 0 ]]; then
    ### List TMUX active sessions after login
    if [[ -z "${TMUX}" ]]; then
      if ! tmux ls &> /dev/null; then
        printf "%s${BBlue}-------------------------------------------------------------------------------${NC}"
        printf "%s\n${BBlue}TMUX: No Active Sessions!${NC}\n"
      else
        printf "%s${BBlue}-------------------------------------------------------------------------------${NC}"
        printf "%s\n${BGreen}TMUX:\t"; tmux ls; printf "%s${NC}"
      fi
    fi
    ### Attach to active TMUX session or start new session if none available after login
    #if [ -z "$TMUX" ] && [ -n "$SSH_TTY" ] && [[ $- =~ i ]]; then tmux attach-session || tmux new-session ; fi
  fi
fi

### TMUX global variables
export TMUX_CPU_COUNT="grep -c ^processor /proc/cpuinfo"

#------------------------------------------------------------------------------
### LOGIN GREETINGS
#------------------------------------------------------------------------------
if [[ "${DISPLAY_GREETING}" == "Y" ]]; then
  greet_time="$(date "+%H")"
  if [ "$greet_time" -lt 12 ]; then greeting="Good morning"
  elif [ "$greet_time" -lt 18 ]; then greeting="Good afternoon"
  else greeting="Good evening"; fi
  printf "%s${BBlue}-------------------------------------------------------------------------------${NC}\n"
  if [[ "${UID}" -ne 0 ]]; then
    printf "%s${BBlue}$greeting ${PS1_USER_COLOR}$(whoami)${NC}.\n${BYellow}It is $(date "+%c") on $HOSTNAME${NC}.\n"  # print date/hostname
    if [[ -z "${TMUX}" ]]; then
      if [[ "${DISPLAY_GREETING_WEATHER}" == "Y" ]]; then
        weather_report="$(curl -s "http://rss.accuweather.com/rss/liveweather_rss.asp?metric=2&locCode=85226" | sed -n '/Currently:/ s/.*: \(.*\): \([0-9]*\)\([CF]\).*/\2Â°\3, \1/p')"
        printf "%s${BGreen}The weather is ${weather_report} in Chandler, AZ${NC}.\n"                                    # print local weather
      fi
      if [[ "${DISPLAY_GREETING_BASHINFO}" == "Y" ]]; then
        printf "%s${BCyan}This is BASH ${BRed}${BASH_VERSION%.*}${BCyan}\nDISPLAY on ${BRed}$DISPLAY${NC}\n"             # print bash version and display
      fi
    fi
  else
    printf "%s${BBlue}$greeting ${PS1_USER_COLOR}$(whoami)${NC}.\n${BYellow}It is $(date "+%c") on $HOSTNAME${NC}.\n"  # print date/hostname
  fi
  printf "%s${BBlue}-------------------------------------------------------------------------------${NC}\n"
fi

#------------------------------------------------------------------------------
### Use dircolors if exist
#------------------------------------------------------------------------------
[[ -e "$HOME"/.dircolors ]] && eval "$(dircolors --sh $HOME/.dircolors)"

### ALIASES - Git dotfiles
#------------------------------------------------------------------------------
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'    # dotfiles git alias command
alias dotfiles-ls='dotfiles ls-tree -r HEAD --name-only'        # list files
alias dotfiles-remove='dotfiles rm --cached'            # remove files
alias dotfiles-reset='dotfiles fetch origin && dotfiles reset --hard origin/master' # replace local files with remote

### fzf util for bash (https://github.com/junegunn/fzf)
#------------------------------------------------------------------------------
#[ -f ~/.fzf.bash ] && source "$HOME"/.fzf.bash
if [[ -f ~/.fzf.bash ]]; then source "$HOME"/.fzf.bash; fi
