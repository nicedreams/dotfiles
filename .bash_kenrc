#!/bin/bash
# Custom bashrc not generally needed across multiple systems
# Custom ken-aliases/functions
#------------------------------------------------------------------------------
### KEN ~/.bash_kenrc
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
### Enable/Disable (Y/N)
#------------------------------------------------------------------------------
AUTO_LOGIN_TMUX="N"             # auto login to tmux session
#--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --
DISPLAY_TMUX="Y"                # displays if tmux has open sessions at login
POWERLINE_PROMPT="N"            # use powerline PS1 theme
DISPLAY_GREETING="N"            # displays greeting with info
DISPLAY_GREETING_WEATHER="N"    # displays weather in greeting
DISPLAY_GREETING_SSH="Y"        # displays ip of ssh client
DISPLAY_GREETING_BASHINFO="N"   # displays weather in greeting
START_SSH_AGENT="N"             # start ssh-agent at login if not already running
DISPLAY_NOTE="Y"                # displays contents of ~/.note
DISPLAY_TODO="Y"                # displays contents of ~/.todo

#------------------------------------------------------------------------------
### COLORS
#------------------------------------------------------------------------------
# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White
# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White
# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White
#
NC="\e[m"               # Color Reset
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Alias vi to vim if installed
#------------------------------------------------------------------------------
command -v vim &> /dev/null && alias vi='vim'

#------------------------------------------------------------------------------
## Source custom prompt from file if exists
#------------------------------------------------------------------------------
if [[ -e "$HOME"/.bash_fancyprompt ]]; then
  source "$HOME"/.bash_fancyprompt
elif [[ -e "$HOME"/.bash_gitprompt ]]; then
  source "$HOME"/.bash_gitprompt
fi

#------------------------------------------------------------------------------
## Get color variable depending on root(red) or user(green)
#------------------------------------------------------------------------------
if [[ "$UID" -eq 0 ]]; then export PS1_USER_COLOR="\e[1;31m"; else export PS1_USER_COLOR="\e[1;32m"; fi

#------------------------------------------------------------------------------
# git alias/functions
#------------------------------------------------------------------------------
alias git-log="git --no-pager log --all --color=always --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' | less -r -X +/[^/]HEAD"
alias git-logf="git --no-pager log --all --color=always --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' | sed -r -e 's/\\|(\\x1b\\[[0-9;]*m)+\\\\(\\x1b\\[[0-9;]*m)+ /├\\1─╮\\2/' -e 's/(\\x1b\\[[0-9;]+m)\\|\\x1b\\[m\\1\\/\\x1b\\[m /\\1├─╯\\x1b\\[m/' -e 's/\\|(\\x1b\\[[0-9;]*m)+\\\\(\\x1b\\[[0-9;]*m)+/├\\1╮\\2/' -e 's/(\\x1b\\[[0-9;]+m)\\|\\x1b\\[m\\1\\/\\x1b\\[m/\\1├╯\\x1b\\[m/' -e 's/╮(\\x1b\\[[0-9;]*m)+\\\\/╮\\1╰╮/' -e 's/╯(\\x1b\\[[0-9;]*m)+\\//╯\\1╭╯/' -e 's/(\\||\\\\)\\x1b\\[m   (\\x1b\\[[0-9;]*m)/╰╮\\2/' -e 's/(\\x1b\\[[0-9;]*m)\\\\/\\1╮/g' -e 's/(\\x1b\\[[0-9;]*m)\\//\\1╯/g' -e 's/^\\*|(\\x1b\\[m )\\*/\\1⎬/g' -e 's/(\\x1b\\[[0-9;]*m)\\|/\\1│/g' | less -r -X +/[^/]HEAD"
#alias git-lazy='git commit -am "$*" && git push'

#------------------------------------------------------------------------------
# Git commit browser
git-show() {
  local commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
  local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always %'"
#  local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
  git log --color=always \
    --format="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" "$@" | \
  fzf --no-sort --tiebreak=index --no-multi --reverse --ansi \
    --header="enter to view, alt-y to copy hash" --preview="$view_commit" \
    --bind="enter:execute:$view_commit | less -R" \
    --bind="alt-y:execute:$commit_hash | xclip -selection clipboard"
}

#------------------------------------------------------------------------------
## POWERLINE PROMPT (Override default prompt)
#------------------------------------------------------------------------------
if [[ "${POWERLINE_PROMPT}" == "Y" ]]; then
  # Get color variable depending on root(red) or user(green)
  if [[ "$UID" -eq 0 ]]; then
    export PS1COL1="${On_Red}"
    export PS1COL2="${Red}"
  else
    export PS1COL1="${On_Green}"
    export PS1COL2="${Green}"
  fi
  # user > path
  #PS1="\[\033[0;30m\]\[\033[${PS1COL1}\] \u \[\033[0m\]\[\033[0;${PS1COL2}\]\[\033[44m\]\[\033[0;34m\]\[\033[44m\]\[\033[0;30m\]\[\033[44m\] \w \[\033[30m\]\[\033[0;34m\]\[\033[0;0m\] "
  # user > hostname > path
  #PS1="\[\033[0;30m\]\[\033[${PS1COL1}\] \u \[\033[0m\]\[\033[0;${PS1COL2}\]\[\033[43m\]\[\033[0;30m\]\[\033[43m\] \h \[\033[0m\]\[\033[0;33m\]\[\033[44m\]\[\033[0;34m\]\[\033[44m\]\[\033[0;30m\]\[\033[44m\] \w \[\033[0m\]\[\033[0;34m\]\[\033[0;0m\] "
  # hostname > user > path
  #PS1="${Black}${On_Yellow} \h${Yellow}${On_Green}${BBlack} \u${Green}${On_Blue}${On_Blue}${BBlack} \w${Blue}${BWhite} "
  PS1="${Black}${On_Yellow}${BWhite} \h${Yellow}${PS1COL1}${BWhite} \u${PS1COL2}${On_Blue}${On_Blue}${BWhite} \w${Blue}${BWhite} "
  #PS1="${Black}${On_White}${BBlack} \h${White}${PS1COL1}${BBlack} \u${PS1COL2}${On_Blue}${On_Blue}${BBlack} \w${Blue}${BWhite} "
  if [[ -e "$HOME"/.bash_gitprompt ]]; then export POWERLINEPS1="Y"; source "$HOME"/.bash_gitprompt; fi
fi

#------------------------------------------------------------------------------
## WINDOW TITLE Prevent messed up terminal-window titles
#------------------------------------------------------------------------------
case $TERM in
  xterm*|rxvt*)
    TITLEBAR='\[\033]0;\u:${PWD}\007\]'
  ;;
  *)
    TITLEBAR=""
  ;;
esac

### Export Language
#------------------------------------------------------------------------------
#export "LC_ALL=en_US.UTF-8"
#export "LANG=en_US.UTF-8"
#export "LANGUAGE=en_US.UTF-8"

### Ncurses UTF8 Fix
#------------------------------------------------------------------------------
#export "NCURSES_NO_UTF8_ACS=1"

#------------------------------------------------------------------------------
### SSH Agent
#------------------------------------------------------------------------------
# Start the ssh-agent in the background
if [[ "${START_SSH_AGENT}" == "Y" ]]; then
  if [[ -z "$SSH_AUTH_SOCK" ]] ; then
    printf "Starting ssh-agent: "
    eval $(ssh-agent -s)
  #  ssh-add
  fi
fi

### SSH Hushlogin (create ~/.hushlogin if not exists)
#------------------------------------------------------------------------------
if [[ ! -r "$HOME"/.hushlogin ]]; then touch "$HOME"/.hushlogin; fi

#------------------------------------------------------------------------------
### MAIL
#------------------------------------------------------------------------------
# Check for new mail at login if not =0 and wait ## seconds before mail checks
MAILCHECK=10
#if [ -d $HOME/Maildir/ ]; then
#  export MAIL=$HOME/Maildir/
#  export MAILPATH=$HOME/Maildir/
#  export MAILDIR=$HOME/Maildir/
#elif [ -f /var/mail/$USER ]; then
#  export MAIL="/var/mail/$USER"
#fi

#------------------------------------------------------------------------------
### Default editor
#------------------------------------------------------------------------------
export VISUAL="vi"
export EDITOR="vi"

#------------------------------------------------------------------------------
### MAN Command Options
#------------------------------------------------------------------------------
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

#------------------------------------------------------------------------------
### LESS Command Options
#-------------------------------------------------------------
# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
#alias more='less'
export PAGER=less
#export LESSCHARSET='latin1'
#export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>&-'
# Use this if lesspipe.sh exists.
#export LESS='-i -N -w -z-4 -g -e -M -X -F -R -P%t?f%f \
#:stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
# LESS man page colors (makes Man pages more readable).
#export LESS_TERMCAP_mb=$'\E[01;31m'
#export LESS_TERMCAP_md=$'\E[01;31m'
#export LESS_TERMCAP_me=$'\E[0m'
#export LESS_TERMCAP_se=$'\E[0m'
#export LESS_TERMCAP_so=$'\E[01;44;33m'
#export LESS_TERMCAP_ue=$'\E[0m'
#export LESS_TERMCAP_us=$'\E[01;32m'

#------------------------------------------------------------------------------
### TMUX
#------------------------------------------------------------------------------
## Auto login to Tmux session or create new
if [[ "${AUTO_LOGIN_TMUX}" == "Y" ]]; then
  ## Attach to active TMUX session or start new session if none available after login
  if [[ -z "${TMUX}" || "${SSH_CLIENT}" || "${SSH_TTY}" || ${EUID} = 0 ]]; then tmux attach || tmux new-session ; fi
  #-------------------------------------
  ## If ssh detected attach to existing tmux session or create new one
  #if [[ -n "${SSH_CONNECTION}" || "${SSH_CLIENT}" ]]; then tmux attach || tmux new-session -t ${HOSTNAME}; fi
fi

## Display TMUX session @ login
if [[ "${DISPLAY_TMUX}" == "Y" ]]; then
  # Do nothing if root else tmux if user
  if [[ "${UID}" -ne 0 ]]; then
   # List TMUX active sessions after login
   if [[ -z "${TMUX}" ]]; then
     if ! tmux ls &> /dev/null; then
       printf "%s${BBlue}-------------------------------------------------------------------------------${NC}\n"
       printf "%s${BRed}TMUX: No Active Sessions!${NC}\n"
       printf "%s${BBlue}-------------------------------------------------------------------------------${NC}\n"
     else
       printf "%s${BGreen}-------------------------------------------------------------------------------${NC}\n"
       printf "%s${BCyan}TMUX: Listing Sessions:\n"; tmux ls; printf "%s${NC}\n"
       printf "%s${BGreen}-------------------------------------------------------------------------------${NC}\n"
     
       #sessions="$( tmux ls 2> /dev/null | awk '! /attached/ { sub(":", "", $1); print $1; }' | xargs echo )"
       #printf "%s\n${BYellow}TMUX Active Sessions: ${BCyan}${sessions}${NC}\n"
       #unset sessions
     fi
   fi
  fi
fi

## TMUX global variables
export TMUX_CPU_COUNT="grep -c ^processor /proc/cpuinfo"

#------------------------------------------------------------------------------
### LOGIN GREETINGS
#------------------------------------------------------------------------------
if [[ "${DISPLAY_GREETING}" == "Y" ]]; then
  greet_time="$(date "+%H")"
  if [ "$greet_time" -lt 12 ]; then greeting="Good morning"
  elif [ "$greet_time" -lt 18 ]; then greeting="Good afternoon"
  else greeting="Good evening"; fi
  printf "%s${BBlue}-------------------------------------------------------------------------------${NC}\n"
  if [[ "${UID}" -ne 0 ]]; then
    printf "%s${BBlue}$greeting ${PS1_USER_COLOR}$(whoami)${NC}.\n${BYellow}It is $(date "+%c") on $HOSTNAME${NC}.\n"  # print date/hostname
    if [[ -z "${TMUX}" ]]; then
      if [[ "${DISPLAY_GREETING_WEATHER}" == "Y" ]]; then
        weather_report="$(curl -s "http://rss.accuweather.com/rss/liveweather_rss.asp?metric=2&locCode=85226" | sed -n '/Currently:/ s/.*: \(.*\): \([0-9]*\)\([CF]\).*/\2°\3, \1/p')"
        printf "%s${BGreen}The weather is ${weather_report} in Chandler, AZ${NC}.\n"                                    # print local weather
      fi
       if [[ "${DISPLAY_GREETING_BASHINFO}" == "Y" ]]; then
        printf "%s${BCyan}This is BASH ${BRed}${BASH_VERSION%.*}${BCyan}\nDISPLAY on ${BRed}$DISPLAY${NC}\n"             # print bash version and display
      fi
      if [[ "${DISPLAY_GREETING_SSH}" == "Y" ]]; then
        if [[ -n "${SSH_CLIENT}" ]]; then echo "Logging in from: ${SSH_CLIENT%% *}"; fi
      fi
    fi
  else
    printf "%s${BBlue}$greeting ${PS1_USER_COLOR}$(whoami)${NC}.\n${BYellow}It is $(date "+%c") on $HOSTNAME${NC}.\n"  # print date/hostname
  fi
  printf "%s${BBlue}-------------------------------------------------------------------------------${NC}\n"
fi


### Display notes at login
#------------------------------------------------------------------------------
if [[ "${DISPLAY_NOTE}" == "Y" ]]; then
  if [[ -f ~/.note ]] && [[ -s ~/.note ]]; then
    printf "\n~/.note\n-------------------------------------------------------------------------------\n"
    cat ~/.note
  fi
fi

### Display todo at login
#------------------------------------------------------------------------------
if [[ "${DISPLAY_TODO}" == "Y" ]]; then
  if [[ -f ~/.todo ]] && [[ -s ~/.todo ]]; then
    printf "\n~/.todo\n-------------------------------------------------------------------------------\n"
    cat ~/.todo
  fi
fi

### fzf util for bash (https://github.com/junegunn/fzf)
#------------------------------------------------------------------------------
#[ -f ~/.fzf.bash ] && source "$HOME"/.fzf.bash
if [[ -f ~/.fzf.bash ]]; then source "$HOME"/.fzf.bash; fi

### ALIASES - Git dotfiles
#------------------------------------------------------------------------------
alias dotfiles='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'    # dotfiles git alias command
alias dotfiles-ls='dotfiles ls-tree -r HEAD --name-only'        # list files
alias dotfiles-remove='dotfiles rm --cached'            # remove files
alias dotfiles-reset='dotfiles fetch origin && dotfiles reset --hard origin/master' # replace local files with remote

#------------------------------------------------------------------------------
### KEN ALIASES ---------------------------------------------------------------
#------------------------------------------------------------------------------
alias ken-tmux-new-tripanewindow='tmux new-window \; split-window -v \; select-pane -t 1 \; split-window -h \; select-pane -t 3 \; set-option -w monitor-activity off \;'
#alias tmux='tmux -2'
#alias tmux='tmux new-session -n $HOSTNAME'
#alias ssh='TERM=xterm-256color ssh'

# start ssh with ssh-agent

assh() {
  (
    # Ensure we don't use the "regular" agent.
    unset SSH_AUTH_SOCK
    # Spawn a new, empty, agent.
    eval $(ssh-agent)
    [ -n "$SSH_AUTH_SOCK" ] || exit 1
    # On exit, kill the agent.
    trap "ssh-agent -k > /dev/null" EXIT
    # Invoke SSH with agent forwarding enabled and automatically add the needed private key in the agent, with "confirm" mode.
    # -o AddKeysToAgent=confirm - adds the unencrypted private key to the agent but each use must be confirmed
    ssh -o AddKeysToAgent=confirm \
      -o ForwardAgent=yes \
      "$@"
  )
}

# rsync .bash* from kenserver to local home
alias ken-rsync-dotfiles-kenserver="rsync -avh --progress ken@192.168.2.10:/home/ken/{.bashrc,.bash_aliases,.bash_functions,.bash_kenrc,.bash_gitprompt,.bash_fancyprompt,.tmux*,.vim*,.mutt*} ${HOME}/"

# open vimwiki
alias vim-wiki='vim -c VimwikiIndex'

## nano
# force nano for sh color syntax highlighting when file has no .sh extension
alias nano-sh='nano -Y sh'

## ranger file manager
alias r='ranger'

## Easily download an MP3 from youtube on the command line
#which youtube-dl &> /dev/null && alias youtube-mp3="youtube-dl --extract-audio --audio-format mp3"

## weather on the console
alias ken-weather-report='curl wttr.in/85226'

## start web server (php/python3)
#alias ken-www-php='php -S 0.0.0.0:8000'
#alias ken-www-python='python3 -m http.server'

### SAMBA/CIFS MOUNTS
#alias ken-cifs-mount='sudo mount -t cifs -o uid=www-data,gid=www-data,dir_mode=0755,file_mode=0644 //192.168.2.7/share /mnt/samba/quickmount'

#------------------------------------------------------------------------------
### KEN FUNCTIONS -------------------------------------------------------------
#------------------------------------------------------------------------------

# Calculator
function calc() {
  echo "scale=3;$@" | bc -l
}

# Show alert message in red on white colors
#function MSG_ALERT() { printf "%s${White}${On_Red}${1}${NC}\n" ;}

# Print temp of zipcode on command line
function ken-weather() { curl -s "http://rss.accuweather.com/rss/liveweather_rss.asp?metric=2&locCode=85226" | sed -n '/Currently:/ s/.*: \(.*\): \([0-9]*\)\([CF]\).*/\2°\3, \1/p' ;}

## fzf ken-notes
function ken-notes() {
  cd "${HOME}"/notes
  fzf --header="F1:Editor F2:Less F3:highlight F4:bat CTRL+E:Editor ENTER:bat" \
   --bind "f1:execute($EDITOR {})" \
   --bind "f2:execute(less -Rf {})" \
   --bind "f3:execute(highlight -O ansi --force {} |less -RSf)" \
   --bind "f4:execute(bat {})" \
   --bind "ctrl-e:execute($EDITOR {})" \
   --bind "enter:execute(bat --color=always {} || less -Rf {})" \
   --preview-window=right:80% \
   --preview "(bat -p --color=always --line-range 1:50 {} || head -50)" \
   --color dark,hl:33,hl+:37,fg+:235,bg+:136,fg+:254 \
   --color info:254,prompt:37,spinner:108,pointer:235,marker:235 || cd -
}

# Simple note utility
note() {
  if [[ ! -f "${HOME}"/.note ]]; then
    touch "${HOME}/.note"
  fi
  if ! (($#)); then
    cat "${HOME}/.note"
  elif [[ "${1}" == "--help" ]]; then
    printf "(note) Usage:\n note\t\t\t:print note contents\n note my message\t:add new message to note\n -l\t\t\t:List note\n -c\t\t\t:Clear entire note\n -d\t\t\t:Delete a line from note\n"
  elif [[ "$1" == "-l" ]]; then
    printf "\n\t${Cyan}-------- note --------${NC}\n"
    #nl -b a "${HOME}/.note"
    cat -n "${HOME}/.note"
    printf "\n"
  elif [[ "$1" == "-c" ]]; then
    read -p "Delete all note? Press Enter to continue or ctrl+c to cancel: " null
    > "${HOME}"/.note
  elif [[ "$1" == "-d" ]]; then
    #nl -b a "${HOME}/.note"
    cat -n "${HOME}/.note"
    eval printf %.0s- '{1..'"${COLUMNS:-$(tput cols)}"\}; echo
    read -p "Type a number to remove: " number
    if [[ -z "${number}" ]]; then
      echo "No input entered"
    else
      sed -i "${number}d" "${HOME}"/.note
    fi
  else
    printf "%s\n" "$*" >> "${HOME}"/.note
  fi
}

# Simple todo utility
todo() {
  if [[ ! -f "${HOME}"/.todo ]]; then
    touch "${HOME}/.todo"
  fi
  if ! (($#)); then
    cat "${HOME}/.todo"
  elif [[ "${1}" == "--help" ]]; then
    printf "(todo) Usage:\n todo\t\t\t:print todo contents\n todo my message\t:add new message to todo\n -l\t\t\t:List todo\n -c\t\t\t:Clear entire todo\n -d\t\t\t:Delete a line from todo\n"
  elif [[ "$1" == "-l" ]]; then
    printf "\n\t${Yellow}-------- date --------\t      -------- todo ---------${NC}\n"
    cat -n "${HOME}/.todo"
    printf "\n"
  elif [[ "$1" == "-c" ]]; then
    read -p "Delete all todo? Press Enter to continue or ctrl+c to cancel: " null
    > "${HOME}"/.todo
  elif [[ "$1" == "-d" ]]; then
    cat -n "${HOME}/.todo"
    eval printf %.0s- '{1..'"${COLUMNS:-$(tput cols)}"\}; echo
    read -p "Type a number to remove: " number
    if [[ -z "${number}" ]]; then
      echo "No input entered"
    else
      sed -i "${number}d" "${HOME}"/.todo
    fi
  else
    echo -e "${Cyan}$(date +%A,\ %B\ %d\ \(%I:%M\ %p\)\ )${NC} $* ${NC}" >> "${HOME}"/.todo
  fi
}

# Write a horizontal line of characters
hr() {
  if [[ "$1" == "--help" ]]; then
    printf "Draws line of characters\n\nUsage:\n  hr <num> <symbol>\n  hr 80 *\n\nhr by itself will fill entire line with #\n"
  else
    # shellcheck disable=SC2183
    printf '%*s\n' "${1:-$COLUMNS}" | tr ' ' "${2:-#}"
  fi
}

## Recycle Bin (safe delete) -----------------------------------------
#function del()
#{
#  if [[ ! -d "/${HOME}/.local/share/Trash/files/" ]]; then printf "Creating directory\n"; mkdir -pv "/${HOME}/.local/share/Trash/files/"; fi
#  mv "$@" "/${HOME}/.local/share/Trash/files/"
#}

## will not overwrite files that have the same name
function del()
{
  local trash_dir="$HOME/.Trash"
  if [[ ! -d "$trash_dir" ]]; then mkdir -pv "$trash_dir"; fi
  for file in "$@" ; do
    if [[ -d "${file}" ]] ; then
      local already_trashed="${trash_dir}"/"$(basename $file)"
      if [[ -n "$(/bin/ls -d $already_trashed*)" ]] ; then
        local count="$(/bin/ls -d $already_trashed* | /usr/bin/wc -l)"
        count=$((++count))
        /bin/mv --verbose "$file" "$trash_dir/$file$count"
        continue
      fi
    fi
    /bin/mv --verbose --backup=numbered "${file}" "${HOME}"/.Trash
  done
}
# ----------------------------------------------------------------------

## list processes using swap (enable one of three options)
function ken-swap-usage() {
  find /proc -maxdepth 2 -path "/proc/[0-9]*/status" -readable -exec awk -v FS=":" '{process[$1]=$2;sub(/^[ \t]+/,"",process[$1]);} END {if(process["VmSwap"] && process["VmSwap"] != "0 kB") printf "%10s %-30s %20s\n",process["Pid"],process["Name"],process["VmSwap"]}' '{}' \; | awk '{print $(NF-1),$0}' | sort -hr | head | cut -d " " -f2- 
}

# FILE/DIR BACKUP -------------------------------------------------------
# -----------------------------------------------------------------------

## Create date stamp gzip of file or directory
function ken-backup-dir() {
  if ! tar -czvf "$*"-"$(date +%Y-%m-%d_%H.%M.%S)".tar.gz "$@" ; then
    echo "Error occured while creating backup!"
  else
    echo "Created gzip of $PWD/$* to $PWD/$*-$(date "+%Y-%m-%d_%H.%M.%S")"
  fi
}

## Create date stamp backup of file or directory
function ken-backup-file() {
  cp "$@" "$*"-"$(date +%Y-%m-%d_%H.%M.%S)"
  echo "Created backup copy of $PWD/$* to $PWD/$*-$(date "+%Y-%m-%d_%H.%M.%S")"
}

## Make backup before editing file
function safeedit() {
cp "$1" "${1}"."$(date +%Y-%m-%d_%H.%M.%S)" && "$EDITOR" "$1"
}

## Create gzip backup of lxc container
function ken-backup-lxc() {
  lxc-stop -n "$(basename "$1")"
  tar --numeric-owner -cpzvf LXC-"$HOSTNAME"-"$(basename "$1")"-"$(date +%Y.%m.%d-%H.%M.%S)".tar.gz "$1"
  echo "Created gzip of $* to $PWD/$*-$(date "+%Y-%m-%d_%H.%M.%S")" || echo "Error occured while creating backup!"
}

#------------------------------------------------------------------------------
### KEN VARIABLES -------------------------------------------------------------
#------------------------------------------------------------------------------
## apt installs
#ken_apt_common=(grc figlet tmux rsync nano vim ncdu unzip wget curl sudo openssh-server htop bash-completion util-linux lsb-release psmisc tree git mailutils mutt apt-transport-https ca-certificates gnupg2 software-properties-common iputils-ping traceroute)
#ken_apt_utils=(nmon dstat iftop iotop nethogs hdparm pciutils lsof hddtemp lm-sensors)
#ken_apt_ranger=(install ranger atool highlight caca-utils w3m mediainfo poppler-utils)
