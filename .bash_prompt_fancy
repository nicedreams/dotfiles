#!/usr/bin/env bash
#
# Theme inspired from agnoster zsh theme and others conversion to bash
# - https://gist.github.com/agnoster/3712874
# - https://gist.github.com/smileart/3750104
# - https://github.com/speedenator/agnoster-bash
# - https://gist.github.com/rtfpessoa
#
# Taken, updated, removed and improved:
#
# : Removed emacs support
# : Removed right side support
# : Added custom colors
# : Added SSH function to display if logged in via ssh
# : Changed coloring between root and normal users
# : Added git symbols on different git status
# : Tried to improve speed by not calling git commands as much
# : Added ranger shell prompt feature
#
# README
# In order for this theme to render correctly, you will need a [Powerline-patched font] https://github.com/powerline/fonts.git
#
# This has been modified with customizations I comment/uncomment to use within functions.
# This script is meant for my own personal use so some options work or not or needs to be changed from #.
#
# INSTALL
# Place script somewhere in your $HOME directory like $HOME/.bash_prompt.bash and source from $HOME/.bashrc file
#
# edit ~/.bashrc
#   if [[ -e "$HOME"/.bash_prompt.bash ]]; then source "$HOME"/.bash_prompt.bash; fi
# --------------------------------------------------------------------


# --------------------------------------------------------------------
DEBUG=0
debug() {
    if [[ ${DEBUG} -ne 0 ]]; then
        >&2 echo -e $*
    fi
}

# --------------------------------------------------------------------
### Segment drawing
# A few utility functions to make it easy and re-usable to draw segmented prompts

CURRENT_BG='NONE'
SEGMENT_SEPARATOR=''
LEFT_SUBSEG=''

text_effect() {
  case "$1" in
    reset)      echo 0;;
    bold)       echo 1;;
    underline)  echo 4;;
  esac
}

# to add colors, see
# http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux
# under the "256 (8-bit) Colors" section, and follow the example for orange below
fg_color() {
  case "$1" in
    black)      echo 30;;
    red)        echo 31;;
    green)      echo 32;;
    yellow)     echo 33;;
    blue)       echo 34;;
    magenta)    echo 35;;
    cyan)       echo 36;;
    white)      echo 37;;
    
    orange)     echo 38\;5\;166;;
    lgrey)      echo 38\;5\;250;;
    grey)       echo 38\;5\;245;;
    dgrey)      echo 38\;5\;240;;
    bblue)      echo 38\;5\;31;;
    bwhite)     echo 38\;5\;255;;
  esac
}

bg_color() {
  case "$1" in
    black)      echo 40;;
    red)        echo 41;;
    green)      echo 42;;
    yellow)     echo 43;;
    blue)       echo 44;;
    magenta)    echo 45;;
    cyan)       echo 46;;
    white)      echo 47;;
    
    orange)     echo 48\;5\;166;;
    lgrey)      echo 48\;5\;250;;
    grey)       echo 48\;5\;245;;
    dgrey)      echo 48\;5\;240;;
    bblue)      echo 48\;5\;31;;
    bwhite)       echo 48\;5\;255;;
  esac;
}

# TIL: declare is global not local, so best use a different name
# for codes (mycodes) as otherwise it'll clobber the original.
# this changes from BASH v3 to BASH v4.
ansi() {
  local seq
  declare -a mycodes=("${!1}")

  debug "ansi: ${!1} all: $* aka ${mycodes[@]}"

  seq=""
  for ((i = 0; i < ${#mycodes[@]}; i++)); do
      if [[ -n $seq ]]; then
          seq="${seq};"
      fi
      seq="${seq}${mycodes[$i]}"
  done
  debug "ansi debug:" '\\[\\033['${seq}'m\\]'
  echo -ne '\[\033['${seq}'m\]'
  # PR="$PR\[\033[${seq}m\]"
}

ansi_single() {
  echo -ne '\[\033['$1'm\]'
}

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  declare -a codes

  debug "Prompting $1 $2 $3"

  # if commented out from kruton's original... I'm not clear
  # if it did anything, but it messed up things like
  # prompt_status - Erik 1/14/17

  #    if [[ -z $1 || ( -z $2 && $2 != default ) ]]; then
  codes=("${codes[@]}" $(text_effect reset))
  #    fi
  if [[ -n $1 ]]; then
    bg=$(bg_color $1)
    codes=("${codes[@]}" $bg)
    debug "Added $bg as background to codes"
  fi
  if [[ -n $2 ]]; then
    fg=$(fg_color $2)
    codes=("${codes[@]}" $fg)
    debug "Added $fg as foreground to codes"
  fi

  debug "Codes: "
  # declare -p codes

  if [[ $CURRENT_BG != NONE && $1 != $CURRENT_BG ]]; then
    declare -a intermediate=($(fg_color $CURRENT_BG) $(bg_color $1))
    debug "pre prompt " $(ansi intermediate[@])
    PR="$PR $(ansi intermediate[@])$SEGMENT_SEPARATOR"
    debug "post prompt " $(ansi codes[@])
    PR="$PR$(ansi codes[@]) "
  else
    debug "no current BG, codes is $codes[@]"
    PR="$PR$(ansi codes[@]) "
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && PR="$PR$3"
}

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    declare -a codes=($(text_effect reset) $(fg_color $CURRENT_BG))
    PR="$PR $(ansi codes[@])$SEGMENT_SEPARATOR"
  fi
  declare -a reset=($(text_effect reset))
  PR="$PR $(ansi reset[@])"
  CURRENT_BG=''
}

# --------------------------------------------------------------------
### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown
# --------------------------------------------------------------------

### virtualenv prompt
prompt_virtualenv() {
  if [[ -n $VIRTUAL_ENV ]]; then
    color=cyan
    prompt_segment $color $PRIMARY_FG
    prompt_segment $color bwhite "$(basename $VIRTUAL_ENV)"
  fi
}

# --------------------------------------------------------------------
### SSH (show ssh from ip before username if logged in via ssh)
prompt_ssh() {
  if [[ -n $SSH_CLIENT ]]; then
    color=dgrey
    #prompt_segment $color $PRIMARY_FG
    prompt_segment $color bwhite $(echo "🔗${SSH_CLIENT%% *}")
    #prompt_segment $color bwhite $(printf "🔗SSH")
  fi
}

# --------------------------------------------------------------------
# Context: user@hostname (who am I and where am I)
prompt_context() {
  #local user=$(whoami)

  #if [[ $user != $DEFAULT_USER || -n $SSH_CLIENT ]]; then
    if [[ "$UID" -eq 0 ]]; then
      #prompt_segment black red "\u"$(echo -e '\e[1;37m')"@"$(echo -e '\e[1;33m')"\h""$(echo -e '\e[m')"
      #prompt_segment black red "\u@\h"
      prompt_segment lgrey black "💻\h"
      prompt_segment red white "👷\u"
    else
      #prompt_segment black green "\u"$(echo -e '\e[1;37m')"@"$(echo -e '\e[1;33m')"\h""$(echo -e '\e[m')"
      #prompt_segment black green "\u@\h"
      prompt_segment lgrey black "💻\h"
      prompt_segment bwhite black "👦\u"
    fi
  #fi
}

# --------------------------------------------------------------------
## GIT FUNCTIONS
# --------------------------------------------------------------------
parse_git_dirty() {
  status="$(git status 2>&1 | tee)"
  #clean="$(echo -n "${status}" 2> /dev/null | grep "Your branch is up to date" &> /dev/null; echo "$?")"
  dirty="$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")"
  untracked="$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")"
  ahead="$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")"
  newfile="$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")"
  renamed="$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")"
  deleted="$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")"
  bits=''
  #if [ "${clean}" == "0" ]; then bits="✔${bits}"; fi
  if [ "${renamed}" == "0" ]; then bits="»${bits}"; fi
  if [ "${ahead}" == "0" ]; then bits="↑${bits}"; fi
  if [ "${newfile}" == "0" ]; then bits="+${bits}"; fi
  if [ "${untracked}" == "0" ]; then bits="?${bits}"; fi
  if [ "${deleted}" == "0" ]; then bits="✘${bits}"; fi
  if [ "${dirty}" == "0" ]; then bits="● ${bits}"; fi
  if [ ! "${bits}" == "" ]; then echo "${bits}"; else echo ""; fi
}

prompt_git() {
  local ref
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    STAT="$(parse_git_dirty)"
    BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    echo -n "status: ${status}" | grep -q "fatal:"
    #ref="$(git symbolic-ref HEAD 2> /dev/null)" || ref="➦ $(git show-ref --head -s --abbrev |head -n1 2> /dev/null)"
    if [[ -n "$STAT" ]]; then
        prompt_segment grey black
    else
        prompt_segment bwhite black
    fi
    #PR="$PR${ref/refs\/heads\// }${STAT}"
    PR="$PR ${BRANCH} ${STAT}"
  fi
}

# --------------------------------------------------------------------
# prints followed history followed by HH:MM, useful for remembering what we did previously
prompt_histdt() {
  #prompt_segment dgrey bwhite "\! [\A]"
  # print only HH:MM:SS
  prompt_segment dgrey bwhite "\t"
}

# --------------------------------------------------------------------
# Dir: current working directory
prompt_dir() {
  prompt_segment bblue bwhite '📁\w'
}

# --------------------------------------------------------------------
# Dir: root or user
prompt_rootuser() {
#if [[ $user != $DEFAULT_USER || -n $SSH_CLIENT ]]; then
  if [[ "$UID" -eq 0 ]]; then
    prompt_segment red bwhite "\\$"
  else
    prompt_segment lgrey black "\\$"
  fi
#fi
}

# --------------------------------------------------------------------
# PS1: second line
prompt_secondline() {
  PR="$PR\n"
  prompt_segment dgrey
  prompt_segment grey
  prompt_segment lgrey
  prompt_segment black bwhite
  PR="$PR\\$ "
}

# --------------------------------------------------------------------
# PS1: > bracket >
prompt_bracket() {
  PR="$PR ${LEFT_SUBSEG}"
}

# --------------------------------------------------------------------
## Main prompt
# --------------------------------------------------------------------

# --------------------------------------------------------------------
# Status Icons:
# - was there an error?
# - am I root?
# - are there background jobs?
# - any active ssh agents running
# - are we logged into local or ssh session?
# --------------------------------------------------------------------
prompt_status() {
  local symbols
  symbols=()
  #[[ $RETVAL -ne 0 ]] && symbols+="$(ansi_single $(fg_color red))❌" || symbols+="$(ansi_single $(fg_color green))✔"     # show if last command failed or succeeded
  [[ $RETVAL -ne 0 ]] && symbols+="$(ansi_single $(fg_color red))❌"                                                     # show if last command failed
  #[[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="$(ansi_single $(fg_color bwhite))⏳"                                       # show if background jobs running
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="$(ansi_single $(fg_color bwhite))⏳"                                       # show if background jobs running
  tsessions="$(tmux list-sessions 2> /dev/null | \grep -cv 'attached')"; [[ $tsessions -gt 0 ]] && symbols+="$(ansi_single $(fg_color bwhite))[$tsessions]"   # show running tmux sessions
  #[[ $UID -eq 0 ]] && symbols+="$(ansi_single $(fg_color red))🛑"                                                        # show if root user
  [[ -n $SSH_AUTH_SOCK ]] && symbols+="$(ansi_single $(fg_color yellow))🔑"                                              # show if ssh agent is active
  [[ -n $SSH_CLIENT ]] && symbols+="$(ansi_single $(fg_color bwhite))🔗"                                                 # show if connected via ssh
  [[ -n "$RANGER_LEVEL" ]] && symbols+="$(ansi_single $(fg_color yellow))R"                                             # show if within ranger shell prompt
  [[ -n "$symbols" ]] && prompt_segment dgrey default "$symbols"
}

# --------------------------------------------------------------------
build_prompt() {
  prompt_status            # show status symbols if active
  #prompt_histdt            # show last command time ran HH:MM:SS
  #prompt_bracket           # show > bracket divider
  #prompt_ssh               # show on PS1 if connected via ssh
  prompt_context           # show user and hostname
  prompt_dir               # show full directory path
  #prompt_virtualenv        # show if virtual environment
  prompt_git               # show if directory is git repo and displays branch and status icons
  #prompt_rootuser          # show # or $ at end of directory if user or root
  prompt_end               # end of prompt (do not disable/comment)
  #prompt_secondline       # enable 2nd line PS1 for commands
}

# --------------------------------------------------------------------
set_bash_prompt() {
  RETVAL=$?
  PR=""
  CURRENT_BG=NONE
  PR="$(ansi_single $(text_effect reset))"
  build_prompt
  PS1=$PR
}

# --------------------------------------------------------------------
PROMPT_COMMAND=set_bash_prompt
