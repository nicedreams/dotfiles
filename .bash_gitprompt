#!/bin/bash
# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ git PS1 Prompt                                                             ║
# ╚════════════════════════════════════════════════════════════════════════════╝

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ Symbols / Emoji                                                            ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# echo -e "\ue0b0 \u00b1 \ue0a0 \u27a6 \u2718 \u26a1 \u2699"
#  ±  ➦ ✘ ✔ ⚡ ⚙ ↑ ↓ △ ▲ ▽ ▼    
 
# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ git Legend                                                                 ║
# ╚════════════════════════════════════════════════════════════════════════════╝
#  + - New files were added
#  ! - Existing files were modified
#  ? - Untracked files exist that are not ignored
#  » - Current changes include file renaming
#  ✘ - An existing tracked file has been deleted
#  $ - There are currently stashed files
#  = - There are unmerged files
#  ↑ - Branch is ahead of the remote (indicating a push is needed)
#  ↓ - Branch is behind the remote (indicating a pull is needed)
#  up/down arrow - The branches have diverged (indicating history has changed and maybe a force-push is needed)
#  ✔ - The current working directory is clean
#------------------------------------------------------------------------------

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ git Aliases                                                                ║
# ╚════════════════════════════════════════════════════════════════════════════╝
alias git-log="git --no-pager log --all --color=always --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' | less -r -X +/[^/]HEAD"
alias git-logf="git --no-pager log --all --color=always --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' | sed -r -e 's/\\|(\\x1b\\[[0-9;]*m)+\\\\(\\x1b\\[[0-9;]*m)+ /├\\1─╮\\2/' -e 's/(\\x1b\\[[0-9;]+m)\\|\\x1b\\[m\\1\\/\\x1b\\[m /\\1├─╯\\x1b\\[m/' -e 's/\\|(\\x1b\\[[0-9;]*m)+\\\\(\\x1b\\[[0-9;]*m)+/├\\1╮\\2/' -e 's/(\\x1b\\[[0-9;]+m)\\|\\x1b\\[m\\1\\/\\x1b\\[m/\\1├╯\\x1b\\[m/' -e 's/╮(\\x1b\\[[0-9;]*m)+\\\\/╮\\1╰╮/' -e 's/╯(\\x1b\\[[0-9;]*m)+\\//╯\\1╭╯/' -e 's/(\\||\\\\)\\x1b\\[m   (\\x1b\\[[0-9;]*m)/╰╮\\2/' -e 's/(\\x1b\\[[0-9;]*m)\\\\/\\1╮/g' -e 's/(\\x1b\\[[0-9;]*m)\\//\\1╯/g' -e 's/^\\*|(\\x1b\\[m )\\*/\\1⎬/g' -e 's/(\\x1b\\[[0-9;]*m)\\|/\\1│/g' | less -r -X +/[^/]HEAD"

alias git-lazy="git commit -am "$*" && git push"

# Delete all local git branches that have been merged and deleted from remote
alias git-prune-local="git fetch --all --prune"


# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ git Functions                                                              ║
# ╚════════════════════════════════════════════════════════════════════════════╝
# Git commit browser
git-show() {
  local commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
  local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always %'"
#  local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
  git log --color=always \
    --format="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" "$@" | \
  fzf --no-sort --tiebreak=index --no-multi --reverse --ansi \
    --header="enter to view, alt-y to copy hash" --preview="$view_commit" \
    --bind="enter:execute:$view_commit | less -R" \
    --bind="alt-y:execute:$commit_hash | xclip -selection clipboard"
}

#------------------------------------------------------------------------------
## export PS1="\$(parse_git_branch)"
parse_git_branch() {
  BRANCH="$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')"
  if [ ! "${BRANCH}" == "" ]; then
    if [ "${BRANCH}" == "master" ]; then
      BRANCH="${BGreen}${BRANCH}${NC}"
    else
      BRANCH="${Purple}${BRANCH}${NC}"
    fi
    STAT="$(parse_git_dirty)"
    echo -e "[${BRANCH}${STAT}] "
#    echo -e "${Cyan}${On_Cyan} ${BWhite} ${BRANCH}${STAT}${Cyan}${BWhite} "
  fi
}

#------------------------------------------------------------------------------
parse_git_dirty() {
  status="$(git status 2>&1 | tee)"
  #clean="$(echo -n "${status}" 2> /dev/null | grep "Your branch is up to date" &> /dev/null; echo "$?")"
  dirty="$(echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?")"
  untracked="$(echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?")"
  ahead="$(echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?")"
  newfile="$(echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?")"
  renamed="$(echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?")"
  deleted="$(echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?")"
  bits=''
#  if [ "${clean}" == "0" ]; then bits="${BGreen}✔${bits}"; fi
#  if [ "${renamed}" == "0" ]; then bits="${BRed}>${bits}${NC}"; fi
#  if [ "${ahead}" == "0" ]; then bits="${BRed}*${bits}${NC}"; fi
#  if [ "${newfile}" == "0" ]; then bits="${BBlue}+${bits}${NC}"; fi
#  if [ "${untracked}" == "0" ]; then bits="${BYellow}?${bits}${NC}"; fi
#  if [ "${deleted}" == "0" ]; then bits="${BRed}x${bits}${NC}"; fi
#  if [ "${dirty}" == "0" ]; then bits="${BRed}!${bits}${NC}"; fi
#  if [ ! "${bits}" == "" ]; then echo " ${bits}"; else echo ""; fi

  #if [ "${clean}" == "0" ]; then bits="${BGreen}✔${bits}"; fi
  if [ "${renamed}" == "0" ]; then bits="${BRed}>${bits}${NC}"; fi
  if [ "${ahead}" == "0" ]; then bits="${BRed}+${bits}${NC}"; fi
  if [ "${newfile}" == "0" ]; then bits="${BBlue}*${bits}${NC}"; fi
  if [ "${untracked}" == "0" ]; then bits="${BYellow}?${bits}${NC}"; fi
  if [ "${deleted}" == "0" ]; then bits="${BRed}x${bits}${NC}"; fi
  if [ "${dirty}" == "0" ]; then bits="${BRed}!${bits}${NC}"; fi
  if [ ! "${bits}" == "" ]; then echo " ${bits}"; else echo ""; fi
}

# ╔════════════════════════════════════════════════════════════════════════════╗
# ║ Append to current PS1                                                      ║
# ╚════════════════════════════════════════════════════════════════════════════╝
export PS1="$PS1\$(parse_git_branch)"

# -------------------------------------------------------------------
# Set PS1 color depending on root or user
#if [[ "$UID" -eq 0 ]]; then PS1_USER_COLOR="${BRed}"; else PS1_USER_COLOR="${BGreen}"; fi

# Style: [hostname](username)[master !]~$
#export PS1="${debian_chroot:+($debian_chroot)}[\[\e[1;33m\]\h\[\e[m\]](\[${PS1_USER_COLOR}\]\u\[\e[m\])\$(parse_git_branch)\[\e[1;34m\]\w\[\e[m\]\\$ "
#export PS1="${debian_chroot:+($debian_chroot)}[\[${BYellow}\]\h\[${NC}\]](\[${PS1_USER_COLOR}\]\u\[${NC}\])\$(parse_git_branch)\[${BBlue}\]\w\[${NC}\]\\$ "

# Style: Powerline
#export PS1="${debian_chroot:+($debian_chroot)}${PS1_BonYellow}\h${PS1_NC}${PS1_BBlack}${PS1_On_Yellow}${left_separator_black}${PS1_BBlack}${PS1_On_Green}\u${PS1_NC}${left_separator_black}${PS1_BBlack}${PS1_On_Blue}\w${PS1_NC}\\$
#export PS1="\[\e[37;1m\]\[\] \u \[\e[0m\]\[\]\[\e[0m\]\[\] \w \[\e[0m\]\[\]"
